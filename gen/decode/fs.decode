ru"Модуль доступа к бортовой файловой системе"
namespace ru.mipt.acsl.fs

import decode.{ber, or, u8, b8}

import ru.mipt.acsl.foundation.string
import ru.mipt.acsl.foundation.error_code

language ru

'Информация о файле'
type file_info struct
(
  'Путь до файла'
  path: string,
  'Длина данных в байтах'
  byteSize: ber,
  'Аттрибуты файла'
  attrs: ber
)

type node_info struct
(
  'Имя узла в пределах каталога'
  name: string,
  'Флаг каталога'
  isDir: b8,
  'Аттрибуты узла'
  attrs: ber,
)

type file_upload_error enum extends error_code (ALREADY_EXISTS = 1, CANT_WRITE = 2, MODE_ERROR = 3, TOO_BIG = 4)
type file_delete_error enum extends error_code (NOT_FOUND = 1, CANT_DELETE = 2)
type file_download_error enum extends error_code (NOT_FOUND = 1, CANT_READ = 2, NOT_FILE = 3, EOF = 4)
type file_list_error enum extends error_code (NOT_FOUND = 1, CANT_READ = 2, NOT_DIR = 3)
type file_create_dir_error enum extends error_code (NOT_FOUND = 1, CANT_WRITE = 2)
type files_mode enum ber (BASE = 0, UPLOADING_FILE = 1, DOWNLOADING_FILE = 2, DOWNLOADING_FILE_LIST = 3)

type files_event enum ber (MODE_CHANGED = 1)

'Компонент поддерживающий управление файловой системой'
component Files
{
  parameters
  (
    'Текущий активный режим'
    activeMode: files_mode
  )

  'Начать загрузку файла'
  command startFileUpload('Информация о загружаемом файле' fileInfo: file_info): file_upload_error

  'Загрузить файл'
  command uploadFilePart('Часть данных файла' fileContentsPart: [u8]): file_upload_error

  'Закончить загрузку файла'
  command stopFileUpload(): file_upload_error

  'Начать скачивание файла'
  command startFileDownload('Путь до файла' path: string): or<file_info, file_download_error>

  'Запросить следующую часть данных файла'
  command downloadFilePart('Максимальный размер части данных файла' byteSize: ber): or<[u8], file_download_error>

  'Закончить скачивание файла'
  command stopFileDownload(): file_download_error

  'Начать скачивание списка узлов каталога'
  command startRequestFileList(): or<ber, file_list_error>

  'Запросить следующую часть списка узлов каталога'
  command requestFileListPart('Максимальное количество узлов в ответе' nodeSize: ber): or<[node_info], file_list_error>

  'Закончить скачивание списка узлов каталога'
  command stopRequestFileList(): file_list_error

  'Удалить файл или каталог'
  command deleteNode('Путь до узла' path: string): file_delete_error

  'Запросить создание каталога'
  command createDir('Путь к каталогу' path: string): file_create_dir_error

  status activeMode(activeMode)

  event modeChanged files_event
  (
    'Старый режим' var oldMode: files_mode,
    'Новый режим' activeMode,
  )
}